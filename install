#!/bin/bash

swapP="+1G"
rootP="+10G"
locale="en_US.UTF-8"

# =========================== #
# Nothing to be modified here #
# =========================== #

uName=""
userPass=""
hostname=""
pkgs="base base-devel xorg-server xorg-xinit xorg-xrandr"
reqs=(dialog reflector dosfstools)
isUEFI=false
fs=""

system_check(){
    if [ $EUID -ne 0 ]; then
        prompt "This script must be run as root" red
        exit 1
    fi

    prompt "Checking for internet connection..." yellow
    ping -q -c 1 -W 1 google.com >/dev/null
    if [ $? -ne 0 ]; then
        prompt "No network connection found!" red
        exit 1
    fi
    prompt "Internet connection found!" green

    prompt "Checking for UEFI..." yellow
    if [ "$(ls -A /sys/firmware/efi/efivars/ 2>/dev/null)" ]; then
        isUEFI=true
        prompt "Found UEFI!" green
    fi

    prompt "Identifying GPU drivers..." yellow
    shopt -s nocasematch
    gpu=$(lspci | grep -e VGA -e 3D)
    if [[ "$gpu" == *"intel"* ]]; then
        add_pkg xf86-video-intel
        add_pkg mesa
        prompt "Intel GPU found!" green
    fi
    if [[ "$gpu" == *"amd"* ]]; then
        add_pkg xf86-video-amdgpu
        add_pkg mesa
        prompt "AMD GPU found!" green
    fi
    if [[ "$gpu" == *"nvidia"* ]]; then
        add_pkg nvidia
        add_pkg nvidia-utils
        prompt "Nvidia GPU found!" green
    fi

    prompt "Installing additional packages if required..." yellow
    pacman -S "${reqs[@]}" --needed --noconfirm > /dev/null
}
# Get username, hostname, password
get_config(){
    uName=$(dialog --inputbox "What username would you like?" 8 40  --output-fd 1)
    while true; do
        pass1=$(dialog --passwordbox "What password would you like for $uName?" 8 40 --output-fd 1)
        pass2=$(dialog --passwordbox "Confirm password for $uName" 8 40 --output-fd 1)
        if [ "$pass1" == "$pass2" ]; then
            userPass="$pass1"
            break 2
        else
            dialog --infobox "Passwords do not match, try again." 3 40; sleep 2
        fi
    done
    hostname=$(dialog --inputbox "What hostname would you like?" 8 40  --output-fd 1)
    if [[ -z "$uName" || -z "$hostname" ]]; then
        dialog --infobox "Username or hostname left blank, try again." 3 50; sleep 2
        get_config
    fi
    dialog --yesno "Username: $uName\nHostname: $hostname\nEFI enabled: $isUEFI" 7 40

    # Return if no confirmation 
    if [ $? -ne 0 ]; then
        get_config
    fi
    clear
}
# Ask for some additional popular packages
get_pkgs(){
    cmd=(dialog --separate-output --checklist "Select additional packages:" 20 40 15)
    args=(1 "Intel Ucode" off
          2 "AMD Ucode" off
          3 "PulseAudio" off
          4 "AlsaAudio" off
          5 "NeoVim" off)
    choices=$("${cmd[@]}" "${args[@]}" 2>&1 >/dev/tty)
    clear
    for i in $choices; do
        case $i in
            1) add_pkg intel-ucode;;
            2) add_pkg amd-ucode;;
            3) add_pkg pulseaudio;;
            4) add_pkg alsa-utils;;
            5) add_pkg neovim;;
        esac
    done
}
add_pkg(){
    if [[ "$pkgs" != *$1* ]]; then
        pkgs="$pkgs $1"
    fi
}
# Asks which drive arch should be installed to
get_drive(){
    tempFile=/tmp/counter.tmp
    echo 0 > $tempFile # Temp file for storing value from loop
    lsblk -T; echo
    ls /dev/sd*[a-z] | while read i; do
        counter=$[$(cat $tempFile) + 1]
        echo $counter > $tempFile
        echo "$counter" "$i"
    done
    numDrives=$(cat $tempFile)
    unlink $tempFile

    while [[ ! "$choice" =~ ^[0-9]+$ ]] || [[ "$choice" -gt "$numDrives" || "$choice" -le 0 ]]; do
        read -r -p "Which drive would you like to install Arch on [1-"$numDrives"]: " choice
    done

    fs=$(ls /dev/sd*[a-z] | sed -n "$choice"p)

    if [ -z $fs ]; then
        prompt "Something went wrong!" red 
        exit 1
    fi

    read -r -p "Are you sure you want to format $fs?"
}
# 1=bootloader, 2=swap, 3=root, 4=home
format_fs(){
    while df | grep -q $fs; do
        prompt "$fs seems to be mounted, trying to unmount!" red
        ls ${fs}?* | xargs -n1 umount || true
    done

    if swapon --show | grep -q $fs; then
        prompt "$fs seems to have swap partition, trying to disable it!" red
        swapoff $(swapon --show | grep $fs | awk '{ print $1}')
    fi
    prompt "Creating partitions..." yellow
    (
    echo g
    if $isUEFI; then
        mkpart "+512M"
    else
        mkpart "+200M"
    fi 
    mkpart "$swapP"
    mkpart "$rootP"
    mkpart 
    echo p 
    echo w
    ) | fdisk $fs > /dev/null

    prompt "Formatting partitions..." yellow
    mkfs.fat -F32 ${fs}1 > /dev/null
    mkswap ${fs}2 2>&1
    swapon ${fs}2 > /dev/null
    mkfs.ext4 -F ${fs}3 > /dev/null
    mkfs.ext4 -F ${fs}4 > /dev/null

    mount ${fs}3 /mnt
    mkdir /mnt/home
    mount ${fs}4 /mnt/home
}
# sequence for creating a new partition
mkpart(){
    echo n
    echo
    echo
    echo y # in case of 'already contains signature'
    echo "$1"
}
jumpChroot(){
    printf "locale=\"$locale\"\nuName=\"$uName\"\nuserPass=\"$userPass\"\nhostname=\"$hostname\"\nisUEFI=\"$isUEFI\"\nfs=\"$fs\"\n" > /mnt/CHROOT
    cp $0 /mnt/install
    chmod 755 /mnt/install

arch-chroot /mnt /bin/bash << "EOF"
./install
EOF
}
arch_install(){
    prompt "Installing Arch Linux..." yellow
    timedatectl set-ntp true
    prompt "Generating pacman mirrors, this might take a while..." yellow
    reflector --latest 200 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
    prompt "Done generating mirrors" green
    prompt "Pacstrapping packages..." yellow
    pacstrap /mnt $pkgs
    genfstab -U /mnt > /mnt/etc/fstab
    prompt "Finished installing Arch" green
}
system_setup(){
    prompt "Setting up the system..." yellow
    hwclock --systohc
    pacman -S --noconfirm networkmanager > /dev/null
    systemctl enable NetworkManager 2>&1
    timeZ="$(curl -s "http://worldtimeapi.org/api/ip.txt" | grep timezone | awk '{print $2}')"
    timedatectl set-timezone $timeZ
    ln -sf /usr/share/$timeZ
    sed -i "/^#.* "$locale" /s/^#//" /etc/locale.gen
    echo "LANG="$locale"" > /etc/locale.conf
    locale-gen > /dev/null
    echo "$hostname" > /etc/hostname
    echo -e "127.0.0.1\t"$hostname"\n::1\t"$hostname"\n127.0.1.1\t"$hostname".local\t"$hostname"" > /etc/hosts
    prompt "Finished setting up the system!" green
}
user_setup(){
    prompt "Setting up the user $uName..." yellow
    useradd -m -G wheel $uName
    if pacman -Qi sudo; then
        echo ""$uName" ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/"$uName"
    fi
    if [ ! -z "$userPass" ]; then
        echo "$uName":"$userPass" | chpasswd
    fi
    prompt "Finished setting up the user ${uName}!" green
}
grub_setup(){
    prompt "Downloading GRUB...." yellow
    pacman -S --noconfirm grub > /dev/null
    if $isUEFI; then
        mkdir /boot/efi
        mount ${fs}1 /boot/efi
        prompt "Installing and configuring GRUB for UEFI, this might take a while..." yellow
        pacman -S --noconfirm efibootmgr > /dev/null
        grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi 2>&1
        grub-mkconfig -o /boot/grub/grub.cfg 2>&1
        mkdir /boot/efi/EFI/BOOT
        cp /boot/efi/EFI/GRUB/grubx64.efi /boot/efi/EFI/BOOT/BOOTX64.EFI
        printf "bcf boot add 1 fs0:\\\EFI\\GRUB\\grubx64.efi\nexit" > /boot/efi/startup.nsh
    else
        prompt "TODO" yellow
        exit
    fi
    umount ${fs}1
    prompt "Finished configuring GRUB!" green
}
prompt(){
    message="$1\033[0m\n"
    case $2 in
    green) message="\033[1;32m$message";;
    yellow) message="\033[1;33m$message";;
    red) message="\033[1;31m$message";;
    esac
    printf "$message"
}
set -e
if ls CHROOT &>/dev/null; then
    source CHROOT
    prompt "Running in chrooted mode!" green
    system_setup
    user_setup
    grub_setup
else
    prompt "Running in non chrooted mode!" green
    system_check
    get_config
    get_pkgs
    get_drive
    format_fs
    arch_install
    jumpChroot
    rm -f /mnt/CHROOT
    rm -f /mnt/install
fi
