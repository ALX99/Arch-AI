#!/bin/bash
set -x
swapP="+1G"
rootP="+11G"

# =========================== #
# Nothing to be modified here #
# =========================== #

uName=""
userPass=""
hostname=""
locale=""
WM=""
pkgs=(base xorg-server xorg-xinit xorg-xrandr)
reqs=(dialog reflector dosfstools fzf)
isUEFI=false
fs=""

system_check(){
    if [ $EUID -ne 0 ]; then
        prompt "This script must be run as root" red
        exit 1
    fi

    prompt "Checking for internet connection..." yellow
    ping -q -c 1 -W 1 google.com &>/dev/null || (prompt "No network connection found!" red && exit 1)
    prompt "Internet connection found!" green

    prompt "Updating the package database, please be patient..." yellow
    pacman -Sy >/dev/null
    prompt "Updated the package database!" green

    prompt "Checking for UEFI..." yellow
    if [ "$(ls -A /sys/firmware/efi/efivars/ 2>/dev/null)" ]; then
        isUEFI=true
        prompt "Found UEFI!" green
    fi

    prompt "Identifying GPU drivers..." yellow
    shopt -s nocasematch
    gpus=$(lspci | grep -e VGA -e 3D)
    for gpu in $gpus; do
        case "$gpu" in
            *"intel"*)
                prompt "Intel GPU found!" green
                add_pkg xf86-video-intel
                add_pkg mesa
                add_pkg vulkan-intel
                # HW acceleration
                add_pkg libva-media-driver
                add_pkg liva-intel-driver;;
            *"amd"*)
                prompt "AMD GPU found!" green
                add_pkg xf86-video-amdgpu
                add_pkg mesa
                add_pkg vulkan-radeon
                # HW acceleration
                add_pkg libva-mesa-driver
                add_pkg libva-vdpau-driver;;
            *"nvidia"*)
                prompt "Nvidia GPU found!" green
                add_pkg nvidia
                add_pkg nvidia-utils;;
        esac
    done
}
# Installs missing requirements for this script (if any) 
installReqs(){
    grep -q Reflector /etc/pacman.d/mirrorlist
    if [ ! $? ]; then
        prompt "Generating pacman mirrors, please be patient..." yellow
        reflector --latest 200 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
        prompt "Done generating mirrors" green
    fi

    prompt "Installing additional packages if required..." yellow
    pacman -S "${reqs[@]}" --needed --noconfirm &>/dev/null
}
# Get username, hostname, password
get_config(){
    prompt "Which locale do you want?" blue
    locale=$(sed -n 's/#//; 24,$p' /etc/locale.gen | fzf --height $(expr $(tput lines) - 1))
    locale=${locale::-2}
    hostname=$(dialog --inputbox "What hostname would you like?" 8 40  --output-fd 1)
    uName=$(dialog --inputbox "What username would you like?" 8 40  --output-fd 1)

    if [[ -z "$uName" || -z "$hostname" ]]; then
        prompt "Username or hostname left blank, try again." red
        get_config
    fi

    while true; do
        pass1=$(dialog --inputbox "What password would you like for ${uName}?" 8 40  --output-fd 1)
        pass2=$(dialog --inputbox "Confirm password for $uName" 8 40  --output-fd 1)
        if [[ -n "$pass1" && "$pass1" == "$pass2" ]]; then
            userPass="$pass1"
            break
        else
            prompt "Passwords do not match, try again." red
        fi
    done
}
getWM(){
    cmd=(dialog --radiolist "Select WM/DE" 20 40 15)
    args=(1 "i3-gaps" on
          2 "KDE plasma" off)
    local choice
    choice=$("${cmd[@]}" "${args[@]}" --output-fd 1)
    clear
    case $choice in
        1) WM="i3-gaps";;
        2) WM="plasma";;
    esac
}

# Ask for some additional popular packages
get_pkgs(){
    cmd=(dialog --separate-output --checklist "Select additional packages:" 10 40 7)
    args=(1 "base-devel" off
          2 "Intel Ucode" off
          3 "AMD Ucode" off
          4 "PulseAudio" off
          5 "AlsaAudio" off
          6 "NeoVim" off
          7 "OpenSSH" off)
    local choice
    choices=$("${cmd[@]}" "${args[@]}" --output-fd 1)
    clear
    for i in $choices; do
        case $i in
            1) add_pkg base-devel;;
            2) add_pkg intel-ucode;;
            3) add_pkg amd-ucode;;
            4) add_pkg pulseaudio;;
            5) add_pkg alsa-utils;;
            6) add_pkg neovim;;
            7) add_pkg openssh;;
        esac
    done
}
add_pkg(){
    if [[ "$pkgs" != *$1* ]]; then
        pkgs+=( "$1" )
    fi
}
# Asks which drive arch should be installed to
get_drive(){
    lsblk -T; echo
    drives=$(find /dev/sd*[a-z] | sort)
    numDrives=$(echo "$drives" | wc -w)

    echo "$drives" | awk '{print NR,$0}'
    while [[ "$choice" -le 0  || "$choice" -gt "$numDrives" ]]; do
        read -r -p "Which drive would you like to install Arch on [1-$numDrives]: " choice
    done

    fs=$(echo "$drives" | sed -n "$choice"p)

    if [ -z "$fs" ]; then
        prompt "Something went wrong!" red 
        exit 1
    fi
}
verify(){
    dialog --title "FINAL CONFIRMATION" --yesno  "Username: $uName\nHostname: $hostname\nDE/WM: $WM\nPackages: ${pkgs[*]}\nLocale: $locale\nRoot partition: $rootP\nSwap partition: $swapP\nInstallation drive: $fs\nUEFI enabled: $isUEFI\n" 14 60 || exit
    clear
}
# 1=bootloader, 2=swap, 3=root, 4=home
format_fs(){
    while df | grep -q "$fs"; do
        prompt "$fs seems to be mounted, trying to unmount!" red
        find "$fs"[1-9] | while read -r partition; do
            umount "$partition"
        done
    done

    while swapon --show | grep -q "$fs"; do
        prompt "$fs seems to have swap partition, trying to disable it!" red
        swapoff "$(swapon --show | grep "$fs" | awk '{ print $1}')"
    done

    prompt "Creating partitions..." yellow
    (
    echo g
    ($isUEFI && mkpart "+512M") || mkpart "+200M"
    mkpart "$swapP"
    mkpart "$rootP"
    mkpart 
    echo p 
    echo w
    ) | fdisk "$fs" > /dev/null

    prompt "Formatting partitions..." yellow
    mkfs.fat -F32 "${fs}"1  &>/dev/null
    mkswap "${fs}"2 &>/dev/null
    swapon "${fs}"2 &>/dev/null
    mkfs.ext4 -F "${fs}"3 &>/dev/null
    mkfs.ext4 -F "${fs}"4 &>/dev/null

    mount "${fs}"3 /mnt
    mkdir /mnt/home
    mount "${fs}"4 /mnt/home
}
# sequence for creating a new partition
mkpart(){
    echo n
    echo
    echo
    echo y # in case of 'already contains signature'
    echo "$1"
}
jumpChroot(){
    printf "locale=\"$locale\"\nuName=\"$uName\"\nuserPass=\"$userPass\"\nhostname=\"$hostname\"\nisUEFI=\"$isUEFI\"\nfs=\"$fs\"\n WM=\"$WM\"\n" > /mnt/CHROOT
    cp $0 /mnt/install
    chmod 755 /mnt/install

arch-chroot /mnt /bin/bash << "EOF"
./install
EOF
}
arch_install(){
    prompt "Installing Arch Linux..." yellow
    timedatectl set-ntp true
    prompt "Pacstrapping packages..." yellow
    pacstrap /mnt "${pkgs[@]}"
    genfstab -U /mnt > /mnt/etc/fstab
    prompt "Finished installing Arch" green
}
system_setup(){
    prompt "Setting up the system..." yellow
    pacman -S --noconfirm networkmanager > /dev/null
    systemctl enable NetworkManager &>/dev/null
    timeZ="$(curl -s "http://worldtimeapi.org/api/ip.txt" | grep timezone | awk '{print $2}')"
    timedatectl set-timezone "$timeZ"
    ln -sf /usr/share/zoneinfo/"$timeZ" /etc/localtime
    hwclock --systohc
    sed -i "/^#.*$locale/s/^#//" /etc/locale.gen
    echo "LANG=$locale" > /etc/locale.conf
    locale-gen > /dev/null
    echo "$hostname" > /etc/hostname
    echo -e "127.0.0.1\t$hostname\n::1\t$hostname\n127.0.1.1\t$hostname.local\t$hostname" > /etc/hosts
    prompt "Finished setting up the system!" green
}
user_setup(){
    prompt "Setting up the user $uName..." yellow
    useradd -m -G wheel "$uName"
    pacman -Qi sudo &>/dev/null && echo "$uName ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/"$uName"
    if [ -n "$userPass" ]; then
        echo "$uName":"$userPass" | chpasswd
    fi
    prompt "Finished setting up the user ${uName}!" green
}
grub_setup(){
    prompt "Downloading GRUB...." yellow
    pacman -S --noconfirm grub > /dev/null
    if $isUEFI; then
        mkdir /boot/efi
        mount "${fs}"1 /boot/efi
        prompt "Installing and configuring GRUB for UEFI..." yellow
        pacman -S --noconfirm efibootmgr > /dev/null
        grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi &>/dev/null
        grub-mkconfig -o /boot/grub/grub.cfg &>/dev/null
        mkdir /boot/efi/EFI/BOOT
        cp /boot/efi/EFI/GRUB/grubx64.efi /boot/efi/EFI/BOOT/BOOTX64.EFI
        printf "bcf boot add 1 fs0:\\\EFI\\GRUB\\grubx64.efi\nexit" > /boot/efi/startup.nsh
    else
        prompt "TODO" yellow
        exit
    fi
    umount "${fs}"1
    prompt "Finished configuring GRUB!" green
}
wm_setup(){
    prompt "Downloading WM/DE..." yellow
    case $WM in
        i3-gaps)
            pacman -S --needed --noconfirm  i3-gaps rxvt-unicode
            echo "exec i3" > /home/"$uName"/.xinitrc;;
        plasma)
            pacman -S --needed --noconfirm plasma
            echo "startkde" > /home/"$uName"/.xinitrc;;
    esac
    prompt "Finished downloading WM/DE!" green
}
prompt(){
    message="$1\033[0m\n"
    case $2 in
    green) message="\033[1;32m$message";;
    yellow) message="\033[1;33m$message";;
    red) message="\033[1;31m$message";;
    blue) message="\033[1;34m$message";;
    esac
    printf "$message"
}
#set -e
if ls CHROOT &>/dev/null; then
    source CHROOT
    prompt "Running in chrooted mode!" green
    system_setup
    user_setup
    grub_setup
    wm_setup
else
    clear
    prompt "Running in non chrooted mode!" green
    system_check
    installReqs
    get_config
    getWM
    get_pkgs
    get_drive
    verify
    format_fs
    arch_install
    jumpChroot
    rm -f /mnt/CHROOT
    rm -f /mnt/install
fi
