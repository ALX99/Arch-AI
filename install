#!/bin/bash

# File where installation errors will be written.
# Will be saved in the root parition of the new installation.
errorfile="err.txt"

swapP="+1G"
rootP="+11G"

uName=""
userPass=""
hostname=""
locale=""
WM=""
pkgs=(xorg-server xorg-xinit xorg-xrandr)
reqs=(dialog reflector dosfstools fzf arch-install-scripts)
isUEFI=false
fs=""

read_arguments() {
    OPTIONS=v
    LONGOPTS=verbose
    
    PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
    eval set -- "$PARSED"
    verbose=false
    while true; do
        case "$1" in
            -v | --verbose)
                verbose=true
                shift
            ;;
            --)
                shift
                break
            ;;
            *)
                exit 1
            ;;
        esac
    done
}
system_check() {
    if [ $EUID -ne 0 ]; then
        prompt "This script must be run as root" red
        exit 1
    fi
    
    prompt "Checking for internet connection..." yellow
    ping -q -c 1 -W 1 google.com 1>/dev/null || (prompt "No network connection found!" red && exit 1)
    prompt "Internet connection found!" green
    
    prompt "Updating the package database, please be patient..." yellow
    out true "Pacman" pacman -Sy
    prompt "Updated the package database!" green
    
    prompt "Checking for UEFI..." yellow
    if [ "$(ls -A /sys/firmware/efi/efivars/ 2>/dev/null)" ]; then
        isUEFI=true
        prompt "Found UEFI!" green
    fi
    
    prompt "Identifying GPU drivers..." yellow
    shopt -s nocasematch
    gpus=$(lspci | grep -e VGA -e 3D)
    for gpu in $gpus; do
        case "$gpu" in
            *"intel"*)
                prompt "Intel GPU found!" green
                add_pkg xf86-video-intel
                add_pkg mesa
                add_pkg vulkan-intel
                # HW acceleration
                add_pkg intel-media-driver
                add_pkg libva-intel-driver
            ;;
            *"amd"*)
                prompt "AMD GPU found!" green
                add_pkg xf86-video-amdgpu
                add_pkg mesa
                add_pkg vulkan-radeon
                # HW acceleration
                add_pkg libva-mesa-driver
                add_pkg libva-vdpau-driver
            ;;
            *"nvidia"*)
                prompt "Nvidia GPU found!" green
                add_pkg nvidia
                add_pkg nvidia-utils
            ;;
        esac
    done
}
# Installs missing requirements for this script (if any)
installReqs() {
    grep -q Reflector /etc/pacman.d/mirrorlist
    if [ ! $? ]; then
        prompt "Generating pacman mirrors, please be patient..." yellow
        reflector --latest 200 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
        prompt "Done generating mirrors" green
    fi
    
    prompt "Installing additional packages if required..." yellow
    out true pacman -S "${reqs[@]}" --needed --noconfirm
}
# Get username, hostname, password
get_config() {
    local locale_list="$(cat /etc/locale.gen | grep UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g')"
    prompt "Which locale do you want?" blue
    locale=$(echo "$locale_list" | fzf --height $(expr $(tput lines) - 1))
    locale="$locale".UTF-8
    hostname=$(dialog --inputbox "What hostname would you like?" 8 40 --output-fd 1)
    uName=$(dialog --inputbox "What username would you like?" 8 40 --output-fd 1)
    
    if [[ -z "$uName" || -z "$hostname" ]]; then
        prompt "Username or hostname left blank, try again." red
        get_config
    fi
    
    while true; do
        pass1=$(dialog --passwordbox "What password would you like for ${uName}?" 8 40 --output-fd 1)
        pass2=$(dialog --passwordbox "Confirm password for $uName" 8 40 --output-fd 1)
        if [ "$pass1" == "$pass2" ]; then
            userPass="$pass1"
            break
        else
            dialog --pause "Passwords do not match, try again." 8 40 3
        fi
    done
}
get_wm() {
    cmd=(dialog --radiolist "Select WM/DE" 20 40 15)
    args=(1 "i3-gaps" off
        2 "KDE plasma" off
        3 "XFCE 4" off
    4 "No DE/WM" on)
    local choice
    choice=$("${cmd[@]}" "${args[@]}" --output-fd 1)
    clear
    case $choice in
        1) WM="i3-gaps" ;;
        2) WM="plasma" ;;
        3) WM="xfce" ;;
    esac
}

# Ask for some additional popular packages
get_pkgs() {
    cmd=(dialog --separate-output --checklist "Select additional packages:" 10 40 7)
    args=(1 "base-devel" off
        2 "Intel Ucode" off
        3 "AMD Ucode" off
        4 "PulseAudio" off
        5 "AlsaAudio" off
        6 "NeoVim" off
    7 "OpenSSH" off)
    local choice
    choices=$("${cmd[@]}" "${args[@]}" --output-fd 1)
    clear
    for i in $choices; do
        case $i in
            1) add_pkg base-devel ;;
            2) add_pkg intel-ucode ;;
            3) add_pkg amd-ucode ;;
            4) add_pkg pulseaudio ;;
            5) add_pkg alsa-utils ;;
            6) add_pkg neovim ;;
            7) add_pkg openssh ;;
        esac
    done
}
add_pkg() {
    # Add package to list if not already there
    if [[ "$pkgs" != *$1* ]]; then
        pkgs+=("$1")
    fi
}
# Asks which drive arch should be installed to
get_drive() {
    lsblk
    echo
    drives=$(find /dev/sd*[a-z] | sort)
    numDrives=$(echo "$drives" | wc -w)
    
    echo "$drives" | awk '{print NR,$0}'
    while [[ "$choice" -le 0 || "$choice" -gt "$numDrives" ]]; do
        read -r -p "Which drive would you like to install Arch on [1-$numDrives]: " choice
    done
    
    fs=$(echo "$drives" | sed -n "$choice"p)
    
    if [ -z "$fs" ]; then
        prompt "Something went wrong!" red
        exit 1
    fi
    bl="${fs}"1
    swap="${fs}"2
    root="${fs}"3
    home="${fs}"4
    
}
verify() {
    dialog --title "FINAL CONFIRMATION" --yesno "Username: $uName\nHostname: $hostname\nDE/WM: $WM\nPackages: ${pkgs[*]}\nLocale: $locale\nRoot partition: $rootP\nSwap partition: $swapP\nInstallation drive: $fs\nUEFI enabled: $isUEFI\n" 14 60 || exit
    clear
}
# 1=bootloader, 2=swap, 3=root, 4=home
format_fs() {
    while df | grep -q "$fs"; do
        prompt "$fs seems to be mounted, trying to unmount!" red
        find "$fs"[1-9] | while read -r partition; do
            out true umount "$partition"
        done
    done
    
    while swapon --show | grep -q "$fs"; do
        prompt "$fs seems to have swap partition, trying to disable it!" red
        swapoff "$(swapon --show | grep "$fs" | awk '{ print $1}')"
    done
    
    prompt "Creating partitions..." yellow
    (
        echo g
        ($isUEFI && mkpart "+512M") || mkpart "+200M"
        mkpart "$swapP"
        mkpart "$rootP"
        mkpart
        echo p
        echo w
    ) | out true fdisk "$fs"
    
    prompt "Formatting partitions..." yellow
    out true mkfs.fat -F32 "$bl"
    out true mkswap "$swap"
    out true swapon "$swap"
    out true mkfs.ext4 -F "$root"
    out true mkfs.ext4 -F "$home"
    
    mount "$root" /mnt
    mkdir /mnt/home
    mount "$home" /mnt/home
}
# sequence for creating a new partition
mkpart() {
    echo n
    echo
    echo
    echo y # in case of 'already contains signature'
    echo "$1"
}
jumpChroot() {
    # Move errors to the new arch installation
    mv "$errorfile" /mnt/"$errorfile"
    errorfile=/mnt/"$errorfile"
    ( set -o posix ; set ) > /mnt/info
    wget -O /mnt/setup https://raw.githubusercontent.com/alx99/arch-ai/develop/setup
    wget -O /mnt/sharedfuncs https://raw.githubusercontent.com/alx99/arch-ai/develop/sharedfuncs
    chmod 755 /mnt/setup

    arch-chroot /mnt /bin/bash <<"EOF"
./setup
EOF
}
arch_install() {
    prompt "Pacstrapping packages..." yellow
    pacstrap /mnt base linux linux-firmware
    genfstab -U /mnt >/mnt/etc/fstab
    prompt "Finished pacstrapping packages" green
}
# Controls where all the text goes
out() {
    local logError="$1"
    shift
    if $verbose && $logError; then
        echo "COMMAND: $@" >>$errorfile
        local lines="$(wc -l < $errorfile)"
        "$@" 2>>$errorfile
        [ "$lines" == "$(wc -l < $errorfile)" ] && sed -i '$ d' $errorfile
        elif $verbose && [ "$logError" == false ]; then
        "$@"
        elif [ $verbose == false ] && $logError; then
        echo "COMMAND: $@" >>$errorfile
        local lines="$(wc -l < $errorfile)"
        "$@" 1>/dev/null 2>>$errorfile
        [ "$lines" == "$(wc -l < $errorfile)" ] && sed -i '$ d' $errorfile
    else
        "$@" >/dev/null 2>&1
    fi
}
source sharedfuncs

read_arguments "$@"
prompt "Running in non chrooted mode!" green
system_check
rm -f "$errorfile"
installReqs
get_config
get_wm
get_pkgs
get_drive
verify
format_fs
arch_install
jumpChroot
prompt "Arch Linux successfully installed!" green
