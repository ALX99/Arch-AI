#!/bin/bash

# This file will be forcefully removed when starting this script.
# Keep this in mind if wanting to change this file for whatever reason
errorfile="err.txt"

# Packages that will be installed on the system with pacstrap
# the only things you are allowed to remove here would be git
# removing other things might break the setup procedure
pacstrap=(linux linux-firmware base base-devel xorg-server xorg-xinit xorg-xrandr grub networkmanager git)
# Required packages to run this script
reqs=(dialog dosfstools fzf arch-install-scripts)
isUEFI=false

read_arguments() {
    verbose=false
    while (("$#")); do
        case "$1" in
        -v | --verbose)
            verbose=true
            shift
            ;;
        --) # end argument parsing
            shift
            break
            ;;
        *)
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        esac
    done
}

system_check() {
    local gpus gpu
    if [ $EUID -ne 0 ]; then
        prompt "This script must be run as root" red
        exit 1
    fi

    prompt "Checking for internet connection..." yellow
    ping -q -c 1 -W 1 google.com 1>/dev/null || (prompt "No network connection found!" red && exit 1)
    prompt "Internet connection found!" green

    prompt "Updating the package database, please be patient..." yellow
    out pacman -Sy
    prompt "Updated the package database!" green

    prompt "Checking for UEFI..." yellow
    if [ "$(ls -A /sys/firmware/efi/efivars/ 2>/dev/null)" ]; then
        isUEFI=true
        prompt "Found UEFI!" green
    fi

    prompt "Identifying GPU drivers..." yellow
    gpus=$(lspci | grep -e VGA -e 3D | tr '[:upper:]' '[:lower:]')
    for gpu in $gpus; do
        case "$gpu" in
        *"intel"*)
            prompt "Intel GPU found!" green
            add_pkg xf86-video-intel
            add_pkg mesa
            add_pkg vulkan-intel
            # HW acceleration
            add_pkg intel-media-driver
            add_pkg libva-intel-driver
            ;;
        *"amd"*)
            prompt "AMD GPU found!" green
            add_pkg xf86-video-amdgpu
            add_pkg mesa
            add_pkg vulkan-radeon
            # HW acceleration
            add_pkg libva-mesa-driver
            add_pkg libva-vdpau-driver
            ;;
        *"nvidia"*)
            prompt "Nvidia GPU found!" green
            add_pkg nvidia
            add_pkg nvidia-utils
            ;;
        esac
    done
}

# Installs missing requirements for this script (if any)
# and updates the mirrorlist if needed
installReqs() {
    if ! grep -q Reflector /etc/pacman.d/mirrorlist; then
        prompt "Installing reflector..." yellow
        out pacman -S reflector --needed --noconfirm
        prompt "Done!" green
        prompt "Generating new pacman mirrors, please be patient..." yellow
        out reflector --latest 100 --sort rate --save /etc/pacman.d/mirrorlist
        prompt "Done generating mirrors" green
    fi

    prompt "Installing additional packages if required..." yellow
    out pacman -S "${reqs[@]}" --needed --noconfirm
}

# Get username, hostname, password, locale
get_config() {
    local locale_list pass1 pass2 root1 root2

    while [[ -z $locale ]]; do
        locale_list="$(grep UTF-8 /etc/locale.gen | awk '{print $1}' | cut -c 2-)"
        # TODO, the US.UTF-8 option is uncommented in the Arch Linux
        # live ISO, so for now I'll add it as an option manually
        locale_list+="$(printf "\nen.US.UTF-8")"
        prompt "Which locale would you like?" blue
        locale=$(echo "$locale_list" | fzf --border --height $(expr $(tput lines) - 1))
    done
    while true; do
        iprompt "What hostname would you like?" false
        hostname="$Reply"
        iprompt "What username would you like?" false
        uName="$Reply"
        if [[ -n $uName && -n $hostname ]]; then
            break
        fi
        prompt "Username, hostname or the root password was left blank, try again." red
    done

    # Get user password
    while true; do
        iprompt "What password would you like for ${uName}?" true
        pass1="$Reply"
        echo
        iprompt "Confirm password for $uName" true
        pass2="$Reply"
        echo
        if [ "$pass1" == "$pass2" ]; then
            # userPass is written to info file
            # shellcheck disable=SC2034
            userPass="$pass1"
            break
        fi
        prompt "Passwords do not match, try again." red
    done

    # Get root password
    while true; do
        iprompt "What password would you like for the root user?" true
        root1="$Reply"
        echo
        iprompt "Confirm password for the root user" true
        root2="$Reply"
        echo
        if [ "$root1" == "$root2" ]; then
            # userPass is written to info file
            # shellcheck disable=SC2034
            rootPW="$root1"
            break
        fi
        prompt "Passwords do not match, try again." red
    done
}

get_wm() {
    local choice cmd args
    prompt 'Choose a WM/DE' blue
    wm="$(printf "KDE Plasma\nXFCE 4\ni3-gaps\nNone" | fzf --border --height $(expr $(tput lines) - 1))"

    # Add the WM package to be packstrapped
    case "$wm" in
    "i3-gaps")
        add_pkg i3-gaps
        add_pkg rxvt-unicode
        ;;
    "KDE Plasma")
        add_pkg plasma
        ;;
    "XFCE 4")
        add_pkg xfce4
        ;;
    esac
}

# Ask for some additional popular packages
get_pkgs() {
    local choice choices cmd args i
    cmd=(dialog --separate-output --checklist "Select additional packages:" 10 40 7)
    args=(
        1 "Intel Ucode" off
        2 "AMD Ucode" off
        3 "PulseAudio" off
        4 "AlsaAudio" off
        5 "NeoVim" off
        6 "OpenSSH" off)
    choices=$("${cmd[@]}" "${args[@]}" --output-fd 1)
    clear
    for i in $choices; do
        case $i in
        1) add_pkg base-devel ;;
        2) add_pkg intel-ucode ;;
        3) add_pkg amd-ucode ;;
        4) add_pkg pulseaudio ;;
        5) add_pkg alsa-utils ;;
        6) add_pkg neovim ;;
        7) add_pkg openssh ;;
        esac
    done
}

# Adds a package to be pacstrapped
add_pkg() {
    # Add package to list if not already there
    if [[ $pacstrap != *$1* ]]; then
        pacstrap+=("$1")
    fi
}

# Asks which drive arch should be installed to
get_drive() {
    lsblk
    echo
    local drives numDrives choice
    drives=$(find /dev/sd*[a-z] | sort)
    numDrives=$(echo "$drives" | wc -w)

    echo "$drives" | awk '{print NR,$0}'
    while [[ "$choice" -le 0 || "$choice" -gt "$numDrives" ]]; do
        read -r -p "Which drive would you like to install Arch on [1-$numDrives]: " choice
    done

    # fs contains the base path to the drive
    # such as /dev/sda
    fs=$(echo "$drives" | sed -n "$choice"p)

    if [ -z "$fs" ]; then
        prompt "Something went wrong!" red
        exit 1
    fi

    local re='^[0-9]+$'

    while ! [[ $RootSize =~ $re ]]; do
        read -r -p "How big should the root partition be [GB]:" RootSize
    done

    while ! [[ $SwapSize =~ $re ]]; do
        read -r -p "How big should the swap partition be [GB]:" SwapSize
    done

    while ! [[ $HomeSize =~ $re ]]; do
        prompt "Type 0 to fill the remaining space on the disk selected" yellow
        read -r -p "Type out the size of the home partition [GB]:" HomeSize
    done

    # Set formatting of the variables
    # so that fdisk can use them
    RootSize="+${RootSize}G"
    SwapSize="+${SwapSize}G"
    if [ "$HomeSize" != "0" ]; then
        HomeSize="+${HomeSize}G"
    fi

    # Setup paths to the different
    # partitions on the hard drive
    bl="${fs}"1
    swap="${fs}"2
    root="${fs}"3
    home="${fs}"4

}

verify() {
    dialog --title "FINAL CONFIRMATION" --yesno "Username: $uName\nHostname: $hostname\nDE/WM: $wm\nPackages: ${pacstrap[*]}\nLocale: $locale\nRoot partition: $RootSize\nSwap partition: $SwapSize\nHome partition: $HomeSize\nInstallation drive: $fs\nUEFI enabled: $isUEFI\n" 14 60 || exit
    clear
}

# 1=bootloader, 2=swap, 3=root, 4=home
format_fs() {
    while swapon --show | grep -q "$fs"; do
        prompt "$fs seems to have swap partition, trying to disable it!" red
        swapoff "$(swapon --show | grep "$fs" | awk '{ print $1}')"
    done

    while df | grep -q "$fs"; do
        prompt "$fs seems to have some partion(s) mounted, trying to unmount!" red
        ls "$fs"?* | xargs -n1 umount -l
        sleep 1
    done

    prompt "Creating partitions..." yellow
    (
        # Create new GPT partition table
        # TODO, for non UEFI installations maybe a DOS partition table should be used?
        echo g
        ($isUEFI && mkpart "+512M") || mkpart "+200M"
        mkpart "$SwapSize"
        mkpart "$RootSize"
        # Either fill the rest of the drive, or the chosen amount
        ([ "$HomeSize" == "0" ] && mkpart) || mkpart "$HomeSize"
        echo p
        echo w
    ) | out fdisk "$fs"

    prompt "Formatting partitions..." yellow
    out mkfs.fat -F32 "$bl"
    out mkswap "$swap"
    out swapon "$swap"
    out mkfs.ext4 -F "$root"
    out mkfs.ext4 -F "$home"

    mount "$root" /mnt
    mkdir /mnt/home
    mount "$home" /mnt/home
}

# sequence for creating a new partition
# 1: size of partition
mkpart() {
    echo n
    echo
    echo
    # In case we get the 'already contains signature' message
    # we need to send 'y'. If this message doesn't show
    # sending 'y' won't have any affect
    echo y
    echo "$1"
}

# chroot into the new arch installation
jumpChroot() {
    # Move errors to the new arch installation
    mv "$errorfile" /mnt/"$errorfile"
    # export all lowercase variables
    # here to a special info file
    (
        set -o posix
        set
    ) | grep -Ev '^([A-Z]|.$)' >/mnt/info

    # TODO we will fetch these files
    # from github when everything works
    cp setup /mnt/setup
    cp sharedfuncs /mnt/sharedfuncs
    #wget -O /mnt/setup https://raw.githubusercontent.com/alx99/arch-ai/develop/setup
    #wget -O /mnt/sharedfuncs https://raw.githubusercontent.com/alx99/arch-ai/develop/sharedfuncs
    chmod 755 /mnt/setup

    # Launch the setup script
    arch-chroot /mnt /bin/bash <<"EOF"
./setup
EOF
}
arch_install() {
    prompt "Pacstrapping packages..." yellow
    pacstrap /mnt "${pacstrap[@]}"
    genfstab -U /mnt >/mnt/etc/fstab
    prompt "Finished pacstrapping packages" green
}

# out logs the errors to the errorfile
# and then echos output of commands
# if verbose is true
out() {
    local lines
    echo "COMMAND: $*" >>$errorfile
    # TODO I have no clue why I wrote this
    lines="$(wc -l <$errorfile)"

    if $verbose; then
        "$@" 2>>$errorfile
    else
        "$@" 1>/dev/null 2>>$errorfile
    fi

    # TODO I have no clue why I wrote this
    [ "$lines" == "$(wc -l <$errorfile)" ] && sed -i '$ d' $errorfile
}
# shellcheck disable=SC2178
# shellcheck disable=SC2179
# shellcheck disable=SC2128
# Interactive prompt
# 1: message
# 2: silent? (true, false)
iprompt() {
    printf "\033[1;34m%s: \033[0m" "$1"
    cmd="read -r"
    $2 && cmd+="s"
    $cmd Reply
}
main() {
    source sharedfuncs
    # Remove old error file
    rm -f "$errorfile"
    read_arguments "$@"
    prompt "Running in non chrooted mode!" green
    system_check
    installReqs
    get_config
    get_wm
    get_pkgs
    get_drive
    verify
    format_fs
    arch_install
    jumpChroot
    prompt "Arch Linux successfully installed!" green
}

main "$@"
