#!/bin/bash
# NOTE: Lowercase variables will be exported to a file

# The below files will be forcefully removed when starting this script.
errorfile="Arch-AI_errors.log"
logFile="Arch-AI.log"
variableLog="Arch-AI_variables.log"
tmpOut="/tmp/out"
tmpErr="/tmp/err"

# Packages that will be installed on the system with pacstrap
# the only things you are allowed to remove here would be git
# removing other things might break the setup procedure
Pacstrap=(linux linux-firmware base base-devel grub networkmanager git go)
# Required packages to run this script
Reqs=(dosfstools fzf arch-install-scripts)

Fzf_Preview="fzf --border --reverse --height 50%"
Common_Pkgs='common_pkgs'

usage="./$(basename "$0") [<flags>] -- Automatic Arch Linux install script

Flags:
    -h, --help    show this help text
    -d, --debug   enable debugging mode (enables -l, -s) and logs variables to $variableLog
    -l, --logging enable logging of all commands (disables -v)
    -s, --show    enable showing which commands are run
    -v, --verbose enable output (enables -s)"

read_arguments() {
    while (("$#")); do
        case "$1" in
        -v | --verbose)
            show=true
            verbose=true
            ;;
        -l | --logging)
            logging=true
            ;;
        -s | --show)
            show=true
            ;;
        -d | --debug)
            logging=true
            debug=true
            show=true
            ;;
        -h | --help)
            echo "$usage"
            exit 0
            ;;
        *)
            echo "Error: Unsupported flag $1" >&2
            echo "$usage"
            exit 1
            ;;
        esac
        shift
    done
}

# Obtain information about the system
# the script is running on
system_check() {
    local gpus gpu

    [ $EUID -ne 0 ] &&
        prompt "This script must be run as root" error &&
        exit 1

    prompt "Checking for UEFI" work
    if ls /sys/firmware/efi/efivars/ &>/dev/null; then
        uefi=true
        prompt "Found UEFI" green
    fi

    prompt "Identifying GPU drivers" work
    gpus=$(lspci | grep -e VGA -e 3D | tr '[:upper:]' '[:lower:]')
    log_variable "gpus"

    # https://wiki.archlinux.org/index.php/Xorg#Installation
    # https://wiki.archlinux.org/index.php/Hardware_video_acceleration
    for gpu in $gpus; do
        case "$gpu" in
        # https://wiki.archlinux.org/index.php/Intel_graphics
        *"intel"*)
            prompt "Intel GPU found" green
            add_pkg mesa
            add_pkg vulkan-intel
            # HW acceleration
            add_pkg intel-media-driver
            add_pkg libva-intel-driver
            # 2D acceleration in Xorg
            add_pkg xf86-video-intel
            ;;
            # https://wiki.archlinux.org/index.php/AMDGPU
        *"amd"*)
            prompt "AMD GPU found" green
            add_pkg mesa
            add_pkg amdvlk
            # HW acceleration
            add_pkg libva-mesa-driver
            add_pkg mesa-vdpau
            # 2D acceleration in Xorg
            add_pkg xf86-video-amdgpu
            ;;
            # https://wiki.archlinux.org/index.php/NVIDIA
        *"nvidia"*)
            prompt "Nvidia GPU found" green
            add_pkg nvidia
            add_pkg nvidia-utils
            # HW acceleration
            add_pkg libva-mesa-driver
            add_pkg mesa-vdpau
            ;;
        esac
    done
}

# Installs missing requirements for this script (if any)
# and updates the mirrorlist if needed
installReqs() {
    prompt "Upading package database" work
    out pacman -Sy
    if ! grep -qi "generated by reflector" /etc/pacman.d/mirrorlist; then
        prompt "Installing reflector" work
        out pacman -S reflector --needed --noconfirm
        prompt "Generating new pacman mirrors, please be patient" work
        reflector --verbose --latest 100 --sort rate --save /etc/pacman.d/mirrorlist
    fi

    prompt "Installing additional packages if required" work
    out pacman -S "${Reqs[@]}" --needed --noconfirm
}

# Get username, hostname, password, locale
get_config() {
    local locale_list pass1 pass2 root1 root2

    # TODO fix how this is parsed
    locale_list="$(grep UTF-8 /etc/locale.gen | awk '{print $1}' | cut -c 2-)"
    # TODO, the US.UTF-8 option is uncommented in the Arch Linux
    # live ISO, so for now I'll add it as an option manually
    locale_list+=$(printf "\nen.US.UTF-8")
    log_variable "locale_list"

    while [[ -z $locale ]]; do
        prompt "Which locale would you like?" question
        locale=$(echo "$locale_list" | $Fzf_Preview)
    done
    log_variable "locale"

    while true; do
        iprompt "What hostname would you like:"
        hostname="$Reply"
        iprompt "What username would you like:"
        uName="$Reply"
        [[ -n $uName && -n $hostname ]] && break
        prompt "Username, hostname or the root password was left blank, try again" error
    done
    log_variable "hostname"
    log_variable "uName"

    # Get user password
    while true; do
        iprompt "What password would you like for ${uName}:" silent
        pass1="$Reply"
        echo
        iprompt "Confirm password for $uName:" silent
        pass2="$Reply"
        echo
        if [ -z "$pass1" ]; then
            prompt "Password left blank, try again" error
        elif [ "$pass1" == "$pass2" ]; then
            # userPass is written to info file
            # shellcheck disable=SC2034
            userPass="$pass1"
            break
        else
            prompt "Passwords do not match, try again" error
        fi
    done

    # Get root password
    while true; do
        iprompt "What password would you like for the root user:" silent
        root1="$Reply"
        echo
        iprompt "Confirm password for the root user:" silent
        root2="$Reply"
        echo
        if [ -z "$root1" ]; then
            prompt "Password left blank, try again" error
        elif [ "$root1" == "$root2" ]; then
            # userPass is written to info file
            # shellcheck disable=SC2034
            rootPW="$root1"
            break
        else
            prompt "Passwords do not match, try again" error
        fi
    done
}

# Asks the user if they want microcode updates
# and installs it if that is the case
# https://wiki.archlinux.org/title/microcode
# TODO edit bootolader config
get_micro() {
    local cpu
    ! Ynprompt "Would you like to install microcode updates for your CPU?" && return

    prompt "Identifying the CPU drivers" work
    cpu=$(cat /proc/cpuinfo | grep vendor | tr '[:upper:]' '[:lower:]')
    log_variable "cpu"
    case "$cpu" in
    *"intel"*)
        prompt "Intel CPU found" green
        add_pkg intel-ucode
        ;;
        # TODO, no clue AMD processors contains "AMD" in vendor_id
    *"amd"*)
        prompt "AMD CPU found" green
        add_pkg amd-ucode
        ;;
    esac
}

# https://wiki.archlinux.org/index.php/Solid_state_drive#TRIM
# shellcheck disable=SC2034
get_misc() {
    Ynprompt "Would you like to install yay?" && installYAY=true
    Ynprompt "Would you like to auto-trim your mounted SSDs once a week?" &&
        enableSSDTRIM=true && add_pkg util-linux

    Ynprompt "Would you like to enable kernel parameters to allow for hibernation?" &&
        enableHibernation=true

    Ynprompt "Would you like to enable parallel and optimized compilation&compression for makepkg?" &&
        makepkgParallel=true
}

# Ask for some additional popular packages
get_pkgs() {
    local choice choices

    prompt "Would you like to install any additional common packages? (Use <Tab>)" question
    choices=$($Fzf_Preview -m <"$Common_Pkgs")
    for choice in $choices; do
        add_pkg "$(grep "$choice" "$Common_Pkgs" | cut -d' ' -f1)"
    done
}

# Adds a package to be pacstrapped
add_pkg() {
    # Add package to list if not already there
    [[ ${Pacstrap[*]} != *$1* ]] && Pacstrap+=("$1")
}

# Asks which drive arch should be installed to
get_drive() {
    local drives numDrives choice
    local re='^[0-9]+$'
    lsblk
    echo
    drives=$(find /dev/sd*[a-z] | sort)
    log_variable "drives"
    numDrives=$(echo "$drives" | wc -w)
    log_variable "numDrives"

    echo "$drives" | awk '{print NR,$0}'
    while ! [[ $choice =~ $re ]] || [[ $choice -le 0 || $choice -gt $numDrives ]]; do
        iprompt "Which drive would you like to install Arch on [1-$numDrives]: "
        choice="$Reply"
    done

    # fs contains the base path to the drive
    # such as /dev/sda
    fs=$(echo "$drives" | sed -n "$choice"p)
    log_variable "fs"

    if [[ -z $fs ]]; then
        prompt "Something went wrong" error
        exit 1
    fi

    while ! [[ $RootSize =~ $re ]]; do
        iprompt "How big should the root partition be [GB]:"
        RootSize="$Reply"
    done

    while ! [[ $SwapSize =~ $re ]]; do
        iprompt "How big should the swap partition be [GB]:"
        SwapSize="$Reply"
    done

    while ! [[ $HomeSize =~ $re ]]; do
        prompt "Type 0 to fill the remaining space on the disk selected" note
        iprompt "Type out the size of the home partition [GB]:"
        HomeSize="$Reply"
    done

    # Set formatting of the variables
    # so that fdisk can use them
    RootSize="+${RootSize}G"
    SwapSize="+${SwapSize}G"
    [[ $HomeSize != 0 ]] && HomeSize="+${HomeSize}G"
    log_variable "RootSize"
    log_variable "SwapSize"
    log_variable "HomeSize"

    # Setup paths to the different
    # partitions on the hard drive
    bl="${fs}"1
    swap="${fs}"2
    root="${fs}"3
    home="${fs}"4

    log_variable "bl"
    log_variable "swap"
    log_variable "root"
    log_variable "home"
}

verify() {
    printf "Username: %s\nHostname: %s\nLocale: %s\n\n" "$uName" "$hostname" "$locale"
    printf "Installation drive: %s\nHome partition: %s\nRoot partition: %s\nSwap partition: %s\nUEFI enabled: %s\n\n" \
        "$fs" "$HomeSize" "$RootSize" "$SwapSize" "$uefi"
    printf "Packages: %s\n" "${Pacstrap[*]}"
    read -rn 1 -p "Continue with install? (y/N)" && [[ ! $REPLY =~ ^[Yy]$ ]] &&
        prompt "Installation cancelled" error && exit
    echo
}

# 1=bootloader, 2=swap, 3=root, 4=home
format_fs() {
    while swapon --show | grep -q "$fs"; do
        prompt "$fs seems to have swap partition, trying to disable it" error
        swapoff "$(swapon --show | grep "$fs" | awk '{ print $1}')"
    done

    while df | grep -q "$fs"; do
        prompt "$fs seems to have some partion(s) mounted, trying to unmount" error
        ls "$fs"?* | xargs -n1 umount -l
        sleep 1
    done
    # Wipe drive
    out wipefs -a "$fs"

    prompt "Creating partitions" work
    (
        # GPT > MBR
        echo g

        if [[ -n $uefi ]]; then
            mkpart "+512M"
            # Set partition type to 'EFI System'
            echo t
            echo 1
        else
            mkpart "+200M"
            # Set partition type to 'BIOS boot'
            echo t
            echo 4
        fi

        mkpart "$SwapSize"
        # Set partition type to 'Linux Swap'
        echo t
        echo 2
        echo 19

        mkpart "$RootSize"
        # Set partition type to 'Linux root (x86-64)'
        echo t
        echo 3
        echo 24

        # Either fill the rest of the drive, or the chosen amount
        ([[ $HomeSize -eq 0 ]] && mkpart) || mkpart "$HomeSize"
        # Set partition type to 'Linux home'
        echo t
        echo 4
        echo 28 # Linux home
        echo w
    ) | out fdisk "$fs"

    prompt "Formatting partitions" work
    out mkfs.fat -F32 "$bl"
    out mkswap -L SWAP_PARTITION "$swap"
    out swapon "$swap"
    out mkfs.ext4 -F "$root"
    out mkfs.ext4 -F "$home"

    prompt "Setting partition labels" work
    out e2label "$root" ROOT_PARTITION
    out e2label "$home" HOME_PARTITION

    prompt "Mounting $root and ${home}" work
    out mount "$root" /mnt
    out mkdir /mnt/home
    out mount "$home" /mnt/home
}

# sequence for creating a new partition
# 1: size of partition
mkpart() {
    echo n
    echo
    echo
    echo "$1"
}

arch_install() {
    prompt "The script will now install and set up your system" green
    prompt "No further input will be needed" green
    sleep 2
    prompt "Pacstrapping packages" work
    pacstrap /mnt "${Pacstrap[@]}"
    prompt "Generating the fstab" work
    genfstab -U /mnt >/mnt/etc/fstab
}

# chroot into the new arch installation
jumpChroot() {
    # export all the current lowercase
    # variables into an info file
    (
        set -o posix
        set
    ) | grep -Ev '^([A-Z]|.$)' >/mnt/info

    cp setup /mnt/setup
    cp sharedfuncs /mnt/sharedfuncs
    chmod 554 /mnt/setup

    # Move files to the new arch installation
    if [[ -n $logging ]]; then
        mv "$logFile" /mnt/
        logFile="/$logFile"
    else
        mv "$errorfile" /mnt/
        errorfile="/$errorfile"
    fi
    if [[ -n $debug ]]; then
        mv "$variableLog" /mnt/
        variableLog="/$variableLog"
        #less </mnt/info
    fi

    # Launch the setup script
    arch-chroot /mnt /bin/bash <<"EOF"
./setup
EOF
}

# Interactive prompt, reads the reply to the $Reply variable
# 1: message
# 2: set to enable silent mode
iprompt() {
    prompt "$1 " question true
    if [[ -n $2 ]]; then
        read -rs Reply
    else
        read -r Reply
    fi
}

# Y/n prompt, returns 0 if ansewr is anything except n or N
# 1: message
Ynprompt() {
    prompt "$1 (Y/n) " question true
    read -rn 1
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "\e[1Dn"
        return 1
    else
        echo -e "\e[1DY"
        return 0
    fi
}

main() {
    set -e
    source sharedfuncs
    # Remove files from previous runs
    rm -f "$errorfile" "$logFile" "$variableLog" "$tmpOut" "$tmpErr"
    read_arguments "$@"
    system_check
    installReqs
    get_config
    get_micro
    get_misc
    get_pkgs
    get_drive
    verify
    format_fs
    arch_install
    jumpChroot
    prompt "Arch Linux successfully installed" green
}

main "$@"
