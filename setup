#!/bin/bash
# Sets up the system without any user interaction.
# All the variables that is needed will be sourced from /info
# shellcheck disable=SC2154
# TODO use readlink

user_setup() {
    prompt "Setting up the user $uName..." yellow
    out useradd -m -G wheel "$uName"
    sed -i "/%wheel ALL=(ALL) ALL/s/^#//g" /etc/sudoers
    out echo "$uName:$userPass" | out chpasswd

    prompt "Setting the root password..." yellow
    out echo "root:$rootPW" | out chpasswd
}

system_setup() {
    local timeZ
    prompt "Setting up the system..." yellow
    out systemctl enable NetworkManager

    timeZ="$(curl -s "http://worldtimeapi.org/api/ip.txt" | grep timezone | awk '{print $2}')"
    log_variable "timeZ" "$timeZ"
    prompt "Setting up the timezone: $timeZ..." yellow
    out ln -sf /usr/share/zoneinfo/"$timeZ" /etc/localtime
    out timedatectl set-timezone "$timeZ"
    # Enable Network Time Protocol (NTP) synchronization
    out timedatectl set-ntp true
    # Write the current software clock time to the hardware clock
    out hwclock --systohc

    # TODO double locale problem
    prompt "Setting up the locale: $locale..." yellow
    sed -i "/$locale/s/^#//g" /etc/locale.gen
    out localectl set-locale LANG="$locale"
    out locale-gen

    prompt "Setting up the hostname: $hostname..." yellow
    echo "$hostname" >/etc/hostname
    printf "127.0.0.1\tlocalhost\n::1\tlocalhost\n127.0.1.1	%s.localdomain	%s" "$hostname" "$hostname" >/etc/hosts
}

trim_setup() {
    prompt "Enabling auto-trimming of SSDs..." yellow
    out systemctl enable fstrim.timer
}

hibernation_setup() {
    prompt "Modifying kernel parameters to allow for hibernation..." yellow
    swapUUID=$(blkid -s UUID -o value "$swap")
    log_variable "swapUUID" "$swapUUID"
    # Modify kernel parameters and initramfs hooks
    sed -i "/GRUB_CMDLINE_LINUX=/c\GRUB_CMDLINE_LINUX=\"resume=UUID=$swapUUID\"" /etc/default/grub &&
        sed -i 's/\<keyboard\>/& resume/' /etc/mkinitcpio.conf # Add the resume hook after the keyboard hook

    # Regenerate the initramfs
    out mkinitcpio -p linux
}

# https://wiki.archlinux.org/index.php/Makepkg#Parallel_compilation
makepkg_parallel() {
    prompt "Enabling parallel compilation and compression for makepkg..." yellow
    out sed -i '/MAKEFLAGS=/c\MAKEFLAGS="-j$(nproc)"' /etc/makepkg.conf
    out sed -i '/COMPRESSXZ/c\COMPRESSXZ=(xz -c -z - --threads=0)' /etc/makepkg.conf
    prompt "Enabling optimized compilation for makepkg..." yellow
    out sed -i '/CFLAGS="-m/c\CFLAGS="-march=native -O2 -pipe -fno-plt"' /etc/makepkg.conf
}

grub_setup() {
    local mountPoint="/boot"
    out mkdir "$mountPoint"
    out mount "$bl" "$mountPoint"
    if [[ -n $uefi ]]; then
        prompt "Downloading additional dependencies for GRUB with UEFI..." yellow
        out pacman -S --noconfirm --needed efibootmgr
        prompt "Installing GRUB for UEFI, this might take a while..." yellow

        # https://wiki.archlinux.org/index.php/GRUB#Installation_2
        # This currently installs it to $mountPoint/EFI/BOOT/BOOTX64.EFI (the default/fallback boot path) which might remove the Windows EFI executable there
        out grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory="$mountPoint" --removable
    else
        # This hasn't been tested
        prompt "Installing GRUB for BIOS, this might take a while..." yellow
        out grub-install --target=i386-pc "$fs"
    fi
    out grub-mkconfig -o /boot/grub/grub.cfg
    out umount "$bl"
}
# Sets up yay
yay_setup() {
    prompt "Installing yay..." yellow
    userpath=/home/"$uName"/
    cd "$userpath" || exit
    out su -c "git clone https://aur.archlinux.org/yay.git" "$uName"
    cd yay || exit
    su -c "makepkg -si" "$uName"
    cd ..
    rm -rf yay/
    cd /
}

main() {
    # Source settings written by install
    # shellcheck disable=SC1091
    source /info
    source /sharedfuncs
    # Shred file since it contains sensative info
    out shred -n25 --remove /info

    prompt "Running in chrooted mode!" green
    user_setup
    system_setup
    # This modifies the grub config, so we'll run this before configuring grub
    [[ -n $enableHibernation ]] && hibernation_setup
    grub_setup
    yay_setup

    [[ -n $enableSSDTRIM ]] && trim_setup
    [[ -n $makepkgParallel ]] && makepkg_parallel

    # Move files to $HOME
    if [[ -n $logging ]]; then
        out mv "$logFile" /home/"$uName"/
    else
        mv "$errorfile" /home/"$uName"/
    fi
    [[ -n $debug ]] && out mv "$variableLog" /home/"$uName"/

    prompt "Briefly check out the log files to make sure that something hasn't gone terribly wrong!" yellow
    ls Arch-AI*
}

main "$@"
