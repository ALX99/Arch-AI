#!/bin/bash
# Sets up the system without any user interaction.
# All the variables that is needed will be sourced from /info
# shellcheck disable=SC2154

user_setup() {
    prompt "Setting up the user $uName" work
    out useradd -m -G wheel "$uName"
    sed -i "/%wheel ALL=(ALL) ALL/s/^#//g" /etc/sudoers
    out echo "$uName:$userPass" \| chpasswd

    prompt "Setting up the root password" work
    out echo "root:$rootPW" \| chpasswd
}

system_setup() {
    local timeZ
    prompt "Setting up the system" work
    out systemctl enable NetworkManager
    # https://wiki.archlinux.org/title/systemd-timesyncd
    out systemctl enable systemd-timesyncd

    # Set up the timezone and clock
    prompt "Setting up the timezone" work
    timeZ="$(curl -s "http://worldtimeapi.org/api/ip.txt" | grep timezone | awk '{print $2}')"
    log_variable "timeZ"
    out ln -sf /usr/share/zoneinfo/"$timeZ" /etc/localtime
    out timedatectl set-timezone "$timeZ"
    # Enable Network Time Protocol (NTP) synchronization
    out timedatectl set-ntp true
    # Write the current software clock time to the hardware clock
    out hwclock --systohc

    # TODO double locale problem
    prompt "Setting up the locale: $locale" work
    out sed -i "/$locale/s/^#//g" /etc/locale.gen
    out locale-gen
    echo -e "LANG=$locale\nLANGUAGE=$locale\nLC_ALL=$locale" >/etc/locale.conf

    # Setup hostname
    prompt "Setting up the hostname: $hostname" work
    echo "$hostname" >/etc/hostname
    printf "127.0.0.1\tlocalhost\n::1\tlocalhost\n127.0.1.1	%s.localdomain	%s" "$hostname" "$hostname" >/etc/hosts
}

trim_setup() {
    prompt "Enabling auto-trimming of SSDs" work
    out systemctl enable fstrim.timer
}

hibernation_setup() {
    prompt "Modifying kernel parameters to allow for hibernation" work
    swapUUID=$(blkid -s UUID -o value "$swap")
    log_variable "swapUUID"
    # Modify kernel parameters and initramfs hooks
    sed -i "/GRUB_CMDLINE_LINUX=/c\GRUB_CMDLINE_LINUX=\"resume=UUID=$swapUUID\"" /etc/default/grub &&
        sed -i "s/\<keyboard\>/& resume/" /etc/mkinitcpio.conf # Add the resume hook after the keyboard hook

    prompt "Regenerating the initramfs" work
    out mkinitcpio -p linux
}

# https://wiki.archlinux.org/index.php/Makepkg#Parallel_compilation
makepkg_parallel() {
    prompt "Enabling parallel compilation and compression" work
    sed -i '/MAKEFLAGS=/c\MAKEFLAGS="-j$(nproc)"' /etc/makepkg.conf
    sed -i '/COMPRESSXZ/c\COMPRESSXZ=(xz -c -z - --threads=0)' /etc/makepkg.conf
    sed -i '/COMPRESSZST/c\COMPRESSZST=(zstd -c -z -q --threads=0 -)' /etc/makepkg.conf

    prompt "Enabling safe architecture-specific optimizations" work
    sed -i '/CFLAGS="-m/c\CFLAGS="-march=native -O2 -pipe -fno-plt"' /etc/makepkg.conf
}

grub_setup() {
    local mountPoint
    [[ -n $uefi ]] && mountPoint="/boot/EFI" || mountPoint="/boot"
    out mkdir -p "$mountPoint"
    out mount "$bl" "$mountPoint"
    if [[ -n $uefi ]]; then
        prompt "Downloading additional dependencies for GRUB with UEFI" work
        out pacman -S --noconfirm --needed efibootmgr

        prompt "Installing GRUB for UEFI" work
        # https://wiki.archlinux.org/index.php/GRUB#Installation_2
        # This currently installs it to $mountPoint/EFI/BOOT/BOOTX64.EFI (the default/fallback boot path) which might remove the Windows EFI executable there
        out grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory="$mountPoint" --removable
    else
        # This hasn't been tested
        prompt "Installing GRUB for BIOS" work
        out grub-install --target=i386-pc "$fs"
    fi

    prompt "Generating GRUB config" work
    out grub-mkconfig -o /boot/grub/grub.cfg

    out umount "$bl"
}
# Sets up yay
yay_setup() {
    prompt "Installing yay" work
    userpath=/home/"$uName"/
    out cd "$userpath" \|\| exit
    out su -c \"git clone https://aur.archlinux.org/yay.git\" "$uName"
    out cd yay \|\| exit
    out su -c \"makepkg -s\" "$uName"
    out pacman -U --needed --noconfirm -- *.xz
    cd ..
    rm -rf yay/
    cd /
}

main() {
    # /info is written by the install script
    # shellcheck disable=SC1091
    source /info
    source /sharedfuncs
    # Shred file since it contains sensative info
    shred -n25 -u /info

    user_setup
    system_setup
    # This modifies the grub config, so we'll run this before configuring grub
    [[ -n $enableHibernation ]] && hibernation_setup
    grub_setup

    # Doing this before installaing yay might make the installation faster
    [[ -n $makepkgParallel ]] && makepkg_parallel

    [[ -n $installYAY ]] && yay_setup
    [[ -n $enableSSDTRIM ]] && trim_setup

    # Move files to $HOME
    if [[ -n $logging ]]; then
        mv "$logFile" /home/"$uName"/
    else
        mv "$errorfile" /home/"$uName"/
    fi
    [[ -n $debug ]] && mv "$variableLog" /home/"$uName"/

    prompt "Log files have been dropped in $HOME" green
}

main "$@"
