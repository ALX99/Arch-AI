#!/bin/bash
# Shared functions between install and setup scripts

rst="\e[0m"  # reset
bnk="\e[5m"  #blink
ylw="\e[33m" # yellow
grn="\e[32m" # green
red="\e[31m" # red
blu="\e[34m" # blue
mgt="\e[35m" # magenta
cyn="\e[36m" # cyan
wht="\e[97m" # white

# shellcheck disable=SC2154
# prompt
# 1: message
# 2: messageType (green, work, error, question, note, command)
# 3: set to disable echoing of newline
prompt() {
    case $2 in
    green) m="$grn$1!" ;;
    work) m="${wht}[$ylw${bnk}O$rst$wht] $ylw$1..." && tput sc ;;
    error) m="$red$1!" ;;
    question) m="$blu$1" ;;
    note) m="${wht}[$cyn$1$wht]" ;;
    command) m="${mgt}Exuecuting: $wht$1" ;;
    esac
    if [[ -n $3 ]]; then
        echo -en "$m$rst"
    else
        echo -e "$m$rst"
    fi
}

work_done() {
    local restore
    echo
    save_cursor_pos restore
    tput rc
    printf "\e[1C\e[32mX\e[0m"
    tput cup "${restore[0]}" "${restore[1]}"
}

# shellcheck disable=SC2154
# out handles running commands and redirecting the output
out() {
    [[ -n $show ]] && prompt "$*" command
    if [[ -n $logging ]]; then
        {
            echo "COMMAND: $*"
            "$@"
        } >>"$logFile" 2>&1
    else
        "$@" 1>"$tmpOut" 2>"$tmpErr"

        # Log errors
        if [[ -s $tmpErr ]]; then
            echo "COMMAND: $*" >>"$errorfile"
            cat "$tmpErr" >>"$errorfile"
        fi
        # Verbose
        [[ -n $verbose ]] && [[ -s /tmp/out ]] && cat /tmp/out
    fi
}

# shellcheck disable=SC2154
# log_variable logs the contents of a variable to the variableLog if the debug flag is set
# 1: name of variable
# 2: content
log_variable() {
    [[ -n $debug ]] &&
        printf "=-=-=-=-=-=-=-=-=-=-= %s =-=-=-=-=-=-=-=-=-=-=\n%s\n" "$1" "$2" >>"$variableLog"
}

save_cursor_pos() {
    export "$1"
    exec </dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0
    echo -en "\e[6n" >/dev/tty
    IFS=';' read -r -d R -a pos
    stty "$oldstty"
    eval "$1[0]=$((${pos[0]:2} - 2))"
    eval "$1[1]=$(("${pos[1]}" - 1))"
}
